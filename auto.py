from sshbrute.ssh import SSHBruteforcer
from port_scanner.port_scanner import *
from http_scanner.WebScanner import WebScanner
from ftpbrute.FTPBruteForcer import FTPBruteForcer


def attempt_ftp_brute_force(nmap_scan, host, username="root"):
    service_info = nmap_scan.get_service_version(21)
    if service_info and service_info.get('service') == 'ftp' and nmap_scan.is_port_open(21):
        print("FTP service detected on port 21. Starting FTP brute force...")
        bruteforcer = FTPBruteForcer(host=host, user=username)
        bruteforcer.brute_force("wordlists.txt")
        print("FTP brute force finished.")
    else:
        print("FTP service not detected or not open on port 21, skipping brute force.")

def attempt_ssh_brute_force(nmap_scan, host, username="root", password_file='wordlists.txt'):
    try:
        password_list = ["password1", "password2", "password3", "password4", "azerty"]
    except FileNotFoundError:
        print("Fichier de mots de passe introuvable.")
        return

    port_status = nmap_scan.is_port_open(22)
    service_info = nmap_scan.get_service_version(22) if port_status else None

    if service_info and service_info.get('service') == 'ssh':
        print("Service SSH détecté sur le port 22. Début de la force brute SSH...")
        ssh_bruteforcer = SSHBruteforcer(host, username, password_list)
        if ssh_bruteforcer.test_connection():
            print("Force brute SSH réussie.")
        else:
            print("Échec de la force brute SSH. Aucun identifiant valide trouvé.")
    else:
        print("Service SSH non détecté ou port 22 fermé, annulation de la force brute.")

def main(host):
    ports = [21, 22, 80]

    try:
        print("Nmap scan will start, please wait!")
        nmap_scan = Nmap(host, ports)
        # print(nmap_scan.scanner._scan_result) Debug purpose

        hostnames = nmap_scan.get_hostnames()
        if hostnames:
            print(f"Hostnames for {host}: {', '.join(hostnames)}")
        else:
            print(f"No hostnames found for {host}")
        print()

        os_info = nmap_scan.get_os()
        if os_info:
            for os_estimation in os_info:
                print(f"OS Estimation: {os_estimation['name']} (Accuracy: {os_estimation['accuracy']}%)")
                if "type" in os_estimation:
                    print(
                        f"  Type: {os_estimation['type']}, Vendor: {os_estimation['vendor']}, OS Family: {os_estimation['osfamily']}, OS Generation: {os_estimation['osgen']}"
                    )
        else:
            print("OS detection not available")

        print()
        for port in ports:
            service_info = nmap_scan.get_service_version(port)
            if service_info:
                print(f"Service Information for port {port}: {service_info.get('service')}, Version: {service_info.get('version')}")
            else:
                print(f"No service version information available for port {port}")

            cves = nmap_scan.get_cves(port)
            if cves:
                print(f"CVEs for port {port}:")
                for cve in cves:
                    print(f"  {cve['id']}")
                    if cve["url"]:
                        print(f"    URL: {cve['url']}")
            else:
                print(f"No CVEs found for port {port}.")
            print()

        attempt_ftp_brute_force(nmap_scan, host, "tonio")
        attempt_ssh_brute_force(nmap_scan, host, "tonio")

    except PortScannerError as error:
        print(error)


if __name__ == "__main__":
    host = input("Veuillez donner une adresse IP ou domaine: ")
    main(host)
    scanner = WebScanner(
        ip=host,
        wordlist_path="http_scanner/wordlists/mini.txt",
        user_pass_file="http_scanner/wordlists/user_pass.txt",
        url_file="urls.txt",
        output_sqlmap_file="output_sqlmap.txt",
        output_file="scan_results.txt",
    )
    scanner.run()
