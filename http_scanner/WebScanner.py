
import subprocess
import requests
import re
from concurrent.futures import ThreadPoolExecutor
import os

class WebScanner:
    def __init__(self, ip, domain, wordlist_path, user_pass_file, url_file, output_sqlmap_file, output_file):
        self.ip = ip
        self.domain = domain
        self.wordlist_path = wordlist_path
        self.user_pass_file = user_pass_file
        self.url_file = url_file
        self.output_sqlmap_file = output_sqlmap_file
        self.output_file = output_file

    def run(self):
        if not os.path.exists(self.url_file):
            open(self.url_file, 'w').close()  # Crée le fichier urls.txt s'il n'existe pas

        self.execute_sublist3r()
        self.execute_paramspider()
        self.process_urls()
        self.run_dalfox()
        self.prepare_urls_for_sqlmap()
        self.run_sqlmap()

        if self.check_ip():
            response_file = self.dir_buster()
            if response_file:
                found_directories = self.parse_gobuster_output(response_file)
                if found_directories:
                    self.fetch_urls_content(found_directories)
                else:
                    print("Aucun répertoire trouvé.")
            else:
                print("Une erreur s'est produite lors de l'exécution de GoBuster.")
        else:
            print("L'IP n'est pas accessible.")

    def check_ip(self):
        try:
            response = requests.get(f'http://{self.ip}')
            return response.status_code == 200
        except requests.RequestException as e:
            print(f"Erreur lors de la requête vers {self.ip}: {e}")
            return False

    def dir_buster(self):
        command = f"gobuster dir -u http://{self.ip} -w {self.wordlist_path} -o response.txt"
        try:
            subprocess.run(command, shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True)
            return "response.txt"
        except subprocess.CalledProcessError as e:
            print(f"Erreur lors de l'exécution de GoBuster : {e}")
            return None

    def parse_gobuster_output(self, file_path):
        found_directories = []
        try:
            with open(file_path, 'r') as file:
                for line in file:
                    match = re.match(r'^(/[^ ]+)', line)
                    if match:
                        directory = match.group(1)
                        found_directories.append(directory)
            with open("url.txts", 'w') as file:
                for directory in found_directories:
                    file.write(f"http://{self.ip}{directory}\n")
        except FileNotFoundError:
            print(f"Le fichier {file_path} n'a pas été trouvé.")
        except Exception as e:
            print(f"Erreur lors de la lecture du fichier {file_path} : {e}")
        return found_directories
    
    def fetch_urls_content(self, directories):
        try:
            with ThreadPoolExecutor(max_workers=10) as executor:
                executor.map(self.fetch_url_content, directories)
        except Exception as e:
            print(f"Erreur inattendue: {e}")

    def fetch_url_content(self, directory):
        full_url = f"http://{self.ip}{directory}"
        try:
            response = requests.get(full_url)
            if response.status_code == 200:
                self.search_and_write_keywords(response.text, directory)
        except requests.RequestException as e:
            print(f"Erreur lors de la requête vers {full_url}: {e}")

    def search_and_write_keywords(self, content, directory):
        patterns = {
            'username': r'username\s*=\s*([^\s,;]+)',
            'password': r'password\s*=\s*([^\s,;]+)',
            'email': r'([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})'
        }
        with open(self.output_file, 'a') as file:
            for key, pattern in patterns.items():
                for match in re.finditer(pattern, content, re.IGNORECASE):
                    if key == 'email':
                        email_user = match.group(1).split('@')[0]
                        file.write(f"Found in {directory}: username derived from email = {email_user}\n")
                    else:
                        file.write(f"Found in {directory}: {key} = {match.group(1)}\n")

    def process_urls(self):
        try:
            with open(self.url_file, 'r') as file:
                urls = file.readlines()
            processed_urls = [url.replace('FUZZ', '{}').strip() for url in urls]
            with open(self.url_file, 'w') as file:
                file.writelines(url + '\n' for url in processed_urls)
            print("Les URLs ont été modifiées et enregistrées.")
        except FileNotFoundError:
            print(f"Le fichier {self.url_file} n'a pas été trouvé.")
        except Exception as e:
            print(f"Erreur lors de la modification des URLs : {e}")

    def execute_paramspider(self):
        command = f"paramspider -d {self.domain}"
        try:
            subprocess.run(command, shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True)
            print("ParamSpider a terminé son exécution.")
        except subprocess.CalledProcessError as e:
            print(f"Erreur lors de l'exécution de ParamSpider : {e}")

    def execute_sublist3r(self):
        sublist3r_path = "/home/debian/Documents/Sublist3r/sublist3r.py"
        command = f"python3 {sublist3r_path} -d {self.domain} -o result_sublist3r.txt"
        try:
            subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            print("Sublist3r a terminé son exécution.")
        except subprocess.CalledProcessError as e:
            print(f"Erreur lors de l'exécution de Sublist3r : {e}")

    def run_dalfox(self):
        if os.path.exists(self.url_file):
            command = f"dalfox file {self.url_file}"
            try:
                process = subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                print("Résultats de Dalfox :")
                print(process.stdout)
            except subprocess.CalledProcessError as e:
                print(f"Erreur lors de l'exécution de Dalfox : {e}")
        else:
            print(f"Le fichier {self.url_file} n'existe pas.")

    def prepare_urls_for_sqlmap(self):
        if os.path.exists(self.url_file):
            try:
                with open(self.url_file, 'r') as file:
                    urls = file.readlines()
                modified_urls = [url.replace('FUZZ', '*') for url in urls]
                with open(self.output_sqlmap_file, 'w') as file:
                    file.writelines(modified_urls)
                print("URLs prêtes pour sqlmap ont été enregistrées.")
            except FileNotFoundError:
                print(f"Le fichier {self.url_file} n'a pas été trouvé.")
            except Exception as e:
                print(f"Erreur lors de la modification des URLs : {e}")
        else:
            print(f"Le fichier {self.url_file} n'existe pas.")

    def run_sqlmap(self):
        if os.path.exists(self.output_sqlmap_file):
            command = f"sqlmap -m {self.output_sqlmap_file} --batch"
            try:
                process = subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                print("Résultats de sqlmap :")
                print(process.stdout)
            except subprocess.CalledProcessError as e:
                print(f"Erreur lors de l'exécution de sqlmap : {e}")
        else:
            print(f"Le fichier {self.output_sqlmap_file} n'existe pas.")

if __name__ == "__main__":
    scanner = WebScanner(
        ip="127.0.0.1",
        domain="vivescia.com",
        wordlist_path="directory-list-2.3-medium.txt",
        user_pass_file="user_pass.txt",
        url_file="urls.txt",
        output_sqlmap_file="output_sqlmap.txt",
        output_file="scan_results.txt"
    )
    scanner.run()