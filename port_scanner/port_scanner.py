import re
import nmap

from typing import List, Dict, Any, Optional


class PortScannerError(Exception):
    """Exception personnalisée pour les erreurs de scan de port."""

    pass


class Nmap:
    def __init__(self, host: str, ports: List[int]):
        """
        Initialise une nouvelle instance de la classe Nmap.

        :param host: L'adresse IP ou le nom de domaine de l'hôte à scanner.
        :param ports: Une liste d'entiers représentant les ports à scanner.
        """
        self.host = host
        self.ports = ",".join(map(str, ports))
        self.scanner = nmap.PortScanner()
        try:
            self.scan_results = self._complete_scan()
        except nmap.nmap.PortScannerError as e:
            raise PortScannerError(f"Erreur lors du scan: {e}") from None

    def _complete_scan(self) -> nmap.PortScanner:
        """
        Effectue un scan complet incluant la détection de l'OS, la version des services et les vulnérabilités.

        :return: Un objet PortScanner contenant les résultats du scan.
        """
        arguments = "-O -sV -sT --script=vuln --system-dns -T5"
        self.scanner.scan(self.host, self.ports, arguments=arguments)
        return self.scanner

    def is_port_open(self, port: int) -> bool:
        """
        Check si le port est ouvert sur la machine distante.

        :param port: le nombre de port a check.
        :return: True si le port est ouvert, fermer sinon
        """
        for host in self.scanner.all_hosts():
            if 'tcp' in self.scanner[host] and port in self.scanner[host]['tcp']:
                state = self.scanner[host]['tcp'][port]['state']
                return state == 'open'
        return False

    def get_hostnames(self) -> List[str]:
        """
        Retourne une liste de tous les noms d'hôte associés aux adresses IP scannées.

        :return: Une liste contenant les noms d'hôte. Si aucun nom d'hôte n'est trouvé, retourne une liste vide.
        """
        hostnames = []
        for host in self.scanner.all_hosts():
            if "hostnames" in self.scanner[host]:
                for hostname in self.scanner[host]["hostnames"]:
                    if hostname["name"]:
                        hostnames.append(hostname["name"])
        return hostnames

    def get_os(self) -> List[Dict[str, Any]]:
        """
        Retourne les estimations du système d'exploitation pour tous les hôtes scannés.

        :return: Une liste de dictionnaires, chaque dictionnaire représentant une estimation d'OS pour chaque adresse IP scannée. Chaque dictionnaire contient les clés 'name', 'accuracy', 'ip', et peut inclure 'type', 'vendor', 'osfamily', et 'osgen' pour chaque classe d'OS correspondante.
        """
        os_estimations = []
        for host in self.scanner.all_hosts():
            host_info = self.scanner[host]
            if "osmatch" in host_info:
                for osmatch in host_info["osmatch"]:
                    os_info = {
                        "ip": host,
                        "name": osmatch.get("name", "Inconnu"),
                        "accuracy": osmatch.get("accuracy", "0"),
                    }

                    os_classes_info = []
                    for osclass in osmatch.get("osclass", []):
                        os_class_info = {
                            "type": osclass.get("type", "Non spécifié"),
                            "vendor": osclass.get("vendor", "Inconnu"),
                            "osfamily": osclass.get("osfamily", "Inconnue"),
                            "osgen": osclass.get("osgen", "Non spécifié"),
                            "cpe": osclass.get("cpe", []),
                        }
                        os_classes_info.append(os_class_info)

                    os_info["os_classes"] = os_classes_info

                    os_estimations.append(os_info)

        return os_estimations

    def get_service_version(self, port: int) -> Optional[Dict[str, str]]:
        """
        Retourne la version du service pour un port donné sur le premier hôte scanné.

        :param port: Le port pour lequel récupérer les informations de version du service.
        :return: Un dictionnaire contenant le nom et la version du service si disponibles, None sinon.
        """
        for host in self.scanner.all_hosts():
            if "tcp" in self.scanner[host] and port in self.scanner[host]["tcp"]:
                service_info = self.scanner[host]["tcp"][port]
                return {
                    "port": port,
                    "service": service_info.get("name", "Unknown"),
                    "version": f"{service_info.get('product', 'Unknown')} {service_info.get('version', '')}".strip(),
                }
        return None

    def get_cves(self, port: int) -> List[Dict[str, Optional[str]]]:
        """
        Retourne une liste de CVEs pour un port donné sur tous les hôtes scannés, avec optionnellement les URLs de référence.

        :param port: Le port pour lequel récupérer les CVEs.
        :return: Une liste de dictionnaires, chaque dictionnaire contenant l'identifiant 'id' du CVE et éventuellement l'URL 'url'.
        """
        cves = []
        cve_pattern = re.compile(r"CVE-\d{4}-\d{4,7}")
        for host in self.scanner.all_hosts():
            if "tcp" in self.scanner[host] and port in self.scanner[host]["tcp"]:
                service_info = self.scanner[host]["tcp"][port]
                if "script" in service_info:
                    for _, output in service_info["script"].items():
                        found_cves = cve_pattern.findall(output)
                        for cve_id in set(found_cves):
                            cve_url = None
                            url_match = re.search(
                                f"{cve_id}.*?(https?://[^\s]+)", output
                            )
                            if url_match:
                                cve_url = url_match.group(1)
                            cves.append({"id": cve_id, "url": cve_url})
        return cves
