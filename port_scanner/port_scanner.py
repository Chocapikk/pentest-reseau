from typing import List, Dict, Optional
import nmap


class PortScannerError(Exception):
    """Exception personnalisée pour les erreurs de scan de port."""

    pass


class Nmap:
    def __init__(self, host: str, ports: List[int]):
        """
        Initialise une nouvelle instance de la classe Nmap.

        :param host: L'adresse IP ou le nom de domaine de l'hôte à scanner.
        :param ports: Une liste d'entiers représentant les ports à scanner.
        """
        self.host = host
        self.ports = ",".join(map(str, ports))
        self.scanner = nmap.PortScanner()
        try:
            self.scan_results = self._complete_scan()
        except nmap.nmap.PortScannerError as e:
            raise PortScannerError(f"Erreur lors du scan: {e}") from None

    def _complete_scan(self) -> nmap.PortScanner:
        """
        Effectue un scan complet incluant la détection de l'OS, la version des services et les vulnérabilités.

        :return: Un objet PortScanner contenant les résultats du scan.
        """
        arguments = "-O -sV --script=vuln"
        self.scanner.scan(self.host, self.ports, arguments=arguments)
        return self.scanner

    def get_os(self) -> List[Dict[str, str]]:
        """
        Retourne les meilleures estimations du système d'exploitation de l'hôte basées sur les résultats du scan.

        :return: Une liste de dictionnaires, chaque dictionnaire représentant une estimation d'OS avec son nom et sa précision.
        """
        os_estimations = []
        if "osmatch" in self.scan_results[self.host]:
            for osmatch in self.scan_results[self.host]["osmatch"]:
                os_info = {"name": osmatch["name"], "accuracy": osmatch["accuracy"]}

                os_classes = osmatch.get("osclass", [])
                if os_classes:
                    for osclass in os_classes:
                        os_info.update(
                            {
                                "type": osclass.get("type", ""),
                                "vendor": osclass.get("vendor", ""),
                                "osfamily": osclass.get("osfamily", ""),
                                "osgen": osclass.get("osgen", ""),
                            }
                        )
                os_estimations.append(os_info)
        return os_estimations

    def get_service_version(self, port: int) -> Optional[Dict[str, str]]:
        """
        Retourne la version du service pour un port donné.

        :param port: Le port pour lequel récupérer les informations de version du service.
        :return: Un dictionnaire contenant le nom et la version du service si disponibles, None sinon.
        """
        if port in self.scan_results[self.host]["tcp"]:
            service_info = self.scan_results[self.host]["tcp"][port]
            return {
                "port": port,
                "service": service_info["name"],
                "version": f"{service_info['product']} {service_info['version']}",
            }
        return None

    def get_cves(self, port: int) -> List[Dict[str, Optional[str]]]:
        """
        Retourne une liste de CVEs pour un port donné, avec optionnellement les URLs de référence.

        :param port: Le port pour lequel récupérer les CVEs.
        :return: Une liste de dictionnaires, chaque dictionnaire contenant l'identifiant 'id' du CVE et éventuellement l'URL 'url'.
        """
        cves = []
        if port in self.scan_results[self.host]["tcp"]:
            service_info = self.scan_results[self.host]["tcp"][port]
            if "script" in service_info:
                for _, output in service_info["script"].items():
                    lines = output.split("\n")
                    for line in lines:
                        if "CVE" in line:
                            parts = line.split("\t")
                            cve_id = [part for part in parts if "CVE" in part][
                                0
                            ].strip()
                            cve_url = None
                            if "http" in parts[-1]:
                                cve_url = parts[-1].strip()
                            cves.append({"id": cve_id, "url": cve_url})
        return cves

